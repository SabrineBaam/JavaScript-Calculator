{"version":3,"sources":["App.js","logo.svg","serviceWorker.js","index.js"],"names":["nums","ops","ids","7","8","9","4","5","6","1","2","3","0","App","state","lastPressed","calc","oper","handelClick","e","innerText","target","setState","evaluated","eval","splitted","split","last","slice","includes","lastNumberIdx","reverse","findIndex","char","length","this","CurrentNumber","className","id","onClick","map","num","key","op","React","Component","ReactDom","render","document","getElementById","module","exports","Boolean","window","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ynDAKMA,KAAK,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACxBC,IAAI,CAAC,IAAI,IAAI,IAAI,KACjBC,IAAI,CACRC,EAAI,QACJC,EAAI,QACJC,EAAI,OACJC,EAAI,OACJC,EAAI,OACJC,EAAI,MACJC,EAAI,MACJC,EAAI,MACJC,EAAI,QACJC,EAAI,OACJ,IAAI,SACJ,IAAK,WACL,IAAK,WACL,IAAK,OAGAC,I,w0BAELC,MAAQ,CACNC,YAAY,GACZC,KAAM,IACNC,KAAK,I,MAGPC,YAAY,SAACC,GAAK,IAAD,YACY,MAAKL,MAAzBE,KADQ,YACRA,KAAKD,YADG,YACHA,YACLK,UAAaD,EAAEE,OAAfD,UACR,OAAOA,WACL,IAAK,KACH,MAAKE,SAAS,CACZN,KAAK,MAEP,MAED,IAAK,IACF,IAAMO,UAAWC,KAAKR,MACvB,MAAKM,SAAS,CACZN,KAAOO,YAEV,MAEF,IAAI,IACF,IAAME,SAAWT,KAAKU,MAAM,cACtBC,KAAOF,SAASG,OAAO,GAAG,GAE5BD,KAAKE,SAAS,MAChB,MAAKP,SAAS,CACZN,KAAMA,KAAK,MAGf,MAEF,QACE,IAAIG,GAAG,GACP,GAAGlB,IAAI4B,SAAST,WACd,GAAGnB,IAAI4B,SAASd,cAA6B,MAAbK,UAAiB,CAAU,IAAMU,cAAed,KAAKU,MAAM,IAAIK,UAC5FC,WAAU,SAAAC,GAAI,MAAY,MAARA,GAAejC,KAAK6B,UAAUI,MACnDd,GAAIH,KAAKY,MAAM,EAAEZ,KAAKkB,OAASJ,eAA3B,WAAgDV,UAAhD,UAEJD,GAAC,UAAMH,KAAN,YAAcI,UAAd,UAGDD,GAAc,MAATH,KAAgBI,UAAaJ,KAAOI,UAG3C,MAAKE,SAAS,CACZN,KAAMG,KAIX,MAAKG,SAAS,CACZP,YAAcK,a,gPAIT,IAAD,SACqBe,KAAKrB,MAAXE,GADf,EACCoB,cADD,EACepB,MACrB,OAEI,kEAAKqB,UAAU,cACjB,kEAAKC,GAAG,UAAUD,UAAU,WACzBrB,GAED,kEAAKqB,UAAU,kBACb,qEAAQA,UAAU,uBAAuBE,QAASJ,KAAKjB,YAAYoB,GAAG,SAAtE,MACCtC,KAAKwC,KAAI,SAAAC,GAAG,OACb,qEAAQJ,UAAS,oBAAuB,IAARI,GAAA,SAAwBC,IAAKD,EAAKF,QAAS,EAAKrB,YAAYoB,GAAIpC,IAAIuC,IAAQA,MAC3G,qEAAQJ,UAAU,aAAaE,QAASJ,KAAKjB,YAAaoB,GAAG,WAA7D,MAEH,kEAAKD,UAAU,iBACZpC,IAAIuC,KAAI,SAAAG,GAAE,OACX,qEAAQN,UAAU,SAASK,IAAKC,EAAIJ,QAAS,EAAKrB,YAAYoB,GAAIpC,IAAIyC,IAAOA,MAC7E,qEAAQN,UAAU,SAASE,QAASJ,KAAKjB,YAAaoB,GAAG,UAAzD,W,KA5ESM,6CAAMC,WAmFzBC,iDAASC,OAAO,2DAAClC,IAAD,MAAQmC,SAASC,eAAe,QACjCpC,2B,2EC5GfqC,EAAOC,QAAU,IAA0B,kC,yGCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASV,OACP,kBAAC,IAAMW,WAAP,KACE,kBAAC7C,EAAA,EAAD,OAEFmC,SAASC,eAAe,QDyHpB,kBAAmBU,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e14f7c62.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDom from 'react-dom';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst nums=[7,8,9,4,5,6,1,2,3,0];\nconst ops=['/','*','-','+'];\nconst ids={\n  7 : 'seven',\n  8 : 'eight',\n  9 : 'nine',\n  4 : 'four',\n  5 : 'five',\n  6 : 'six',\n  1 : 'one',\n  2 : 'two',\n  3 : 'three',\n  0 : 'zero',\n  '/':'divide',\n  '*': 'multiply',\n  '-': 'subtract',\n  '+': 'add'\n}\n\nclass  App extends React.Component {\n  \n  state = {\n    lastPressed:'',\n    calc: '0',\n    oper:''    \n  }\n  \n  handelClick=(e)=>{\n    const {calc,lastPressed} = this.state;\n    const {innerText} = e.target;\n   switch(innerText){\n     case 'AC'  :{\n       this.setState({\n         calc:'0'\n       });\n       break;\n      }\n      case '='  :{\n         const evaluated =eval(calc);\n        this.setState({\n          calc : evaluated\n        });\n       break;\n      }\n     case'.':{\n       const splitted = calc.split(/[\\+\\-\\*\\/]/);\n       const last = splitted.slice(-1)[0];\n       \n       if(!last.includes('.')){\n         this.setState({\n           calc: calc+'.'\n         });\n       }\n       break;\n     }\n     default: {\n       let e ='';\n       if(ops.includes(innerText)){\n         if(ops.includes(lastPressed) && innerText !=='-'){         const lastNumberIdx =calc.split('').reverse()\n           .findIndex(char => char !==' '&&  nums.includes(+char));\n         e = calc.slice(0,calc.length - lastNumberIdx) + ` ${innerText} `;\n       } else{\n         e = `${calc} ${innerText} `;\n       }\n       }else {\n         e = (calc === '0') ? innerText : (calc + innerText);\n       }\n       \n       this.setState({\n         calc :e\n       });\n     }\n   }  \n    this.setState({\n      lastPressed : innerText\n    });\n  }\n  \n  render(){\n    const {CurrentNumber,calc}=this.state;\n    return(\n      \n        <div className=\"calculator\">\n      <div id=\"display\" className=\"display\">\n        {calc}\n        </div>\n        <div className=\"nums-container\">\n          <button className=\" big-h light-grey ac\" onClick={this.handelClick}id=\"clear\">AC</button>\n          {nums.map(num => (\n          <button className={`dark-grey ${num === 0 && `big-h`}`} key={num} onClick={this.handelClick}id={ids[num]} >{num}</button>))}\n           <button className=\"light-grey\" onClick={this.handelClick} id=\"decimal\">.</button>\n        </div>\n        <div className=\"ops-container\">\n          {ops.map(op => (\n          <button className=\"orange\" key={op} onClick={this.handelClick}id={ids[op]} >{op}</button>))}\n          <button className=\"orange\" onClick={this.handelClick} id=\"equals\">=</button>\n        </div>\n    </div>\n           )\n  }   \n}\n\nReactDom.render(<App />,document.getElementById(\"app\"));\nexport default App;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}